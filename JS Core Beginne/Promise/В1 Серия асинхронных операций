/*Напишите функцию, выполняющую серию асинхронных операций
последовательно, используя Promises*/

function executeAsyncOperations(operations) {
  return operations.reduce((promiseChain, operation) => {
    return promiseChain.then(() => {
      return new Promise((resolve, reject) => {
        operation((err, result) => {
          if (err) {
            reject(err);
          } else {
            resolve(result);
          }
        });
      });
    });
  }, Promise.resolve());
}

function operation1(callback) {
  setTimeout(() => {
    console.log('Операция 1 выполнена');
    callback(null, 'Результат операции 1');
  }, 1000);
}

function operation2(callback) {
  setTimeout(() => {
    console.log('Операция 2 выполнена');
    callback(null, 'Результат операции 2');
  }, 1500);
}

function operation3(callback) {
  setTimeout(() => {
    console.log('Операция 3 выполнена');
    callback(null, 'Результат операции 3');
  }, 500);
  
}

const operations = [operation1, operation2, operation3];

executeAsyncOperations(operations)
  .then(result => {
    console.log('Все операции выполнены:', result);
  })
  .catch(error => {
    console.error('Ошибка:', error);
  });
